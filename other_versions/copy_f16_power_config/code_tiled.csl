param stride_size : i16;
param size : i16;
param tile : i16;
param loop_iter : i16;

const trace = @import_module("<debug>", .{.buffer_size = 100});
const random = @import_module("<random>");
const power_config = @import_module("power_config.csl");

const main_color : color = @get_color(0);
const done_color : color = @get_color(1);

var input1_data = @zeros([size] f16);
var output_data = @zeros([size] f16);

const input1_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{size / stride_size}
                                         -> input1_data[i * stride_size]});
const output_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{size / stride_size}
                                         -> output_data[i * stride_size]});

const dsd_ready  = @get_dsd(fabout_dsd, .{.fabric_color = done_color, .extent = 1});

task pe_task() void {

  var idx: i16 = 0;
  trace.trace_timestamp();
  while (idx < loop_iter) : (idx += 1) {
    @fmovh(output_dsd, input1_dsd); // stream copy
  }
  trace.trace_timestamp();

  @fmovs(dsd_ready, 1.0); // signal completion
}

layout {
  @set_rectangle(tile, tile);
  var y: i16 = 0;
  while (y < tile) : (y += 1) {
    var x: i16 = 0;
    while (x < tile) : (x += 1) {
      @set_tile_code(x, y, "code_tiled.csl", .{ .stride_size = stride_size, .size = size, .loop_iter = loop_iter });
      @set_color_config(x, y, done_color, .{ .routes = .{ .rx=.{RAMP}, .tx=.{EAST} }});
    }
  }
}

comptime {
  @bind_task(pe_task, main_color);
  @activate(main_color);

  power_config.set();
}

