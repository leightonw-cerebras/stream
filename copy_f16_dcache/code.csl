const trace = @import_module("<debug>", .{.buffer_size = 100});
const dcache = @import_module("dcache.csl");

const main_color : color = @get_color(0);
const done_color : color = @get_color(1);

var dummy = @zeros([8] f16);

const input1_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{8} -> dummy[i]});
const output_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{8} -> dummy[i]});

const dsd_ready  = @get_dsd(fabout_dsd, .{.fabric_color = done_color, .extent = 1});


task pe_task() void {
  dcache.set_dsd_base_to_dcache_addr(input1_dsd, 0);
  dcache.set_dsd_base_to_dcache_addr(output_dsd, 8);

  trace.trace_timestamp();
  for (comptime @range(i16, 1000)) |i| {
    @fmovh(output_dsd, input1_dsd); // stream copy
  }
  trace.trace_timestamp();

  @fmovs(dsd_ready, 1.0); // signal completion
}

layout {
  @set_rectangle(1, 1);
  @set_tile_code(0, 0, "code.csl");
  @set_color_config(0, 0, done_color, .{ .routes = .{ .rx=.{RAMP}, .tx=.{EAST} }});
}

comptime {
  @bind_task(pe_task, main_color);
  @activate(main_color);
}

